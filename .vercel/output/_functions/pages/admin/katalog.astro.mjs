import { c as createComponent, r as renderTemplate, m as maybeRenderHead, g as renderComponent } from '../../chunks/astro/server_vBMvLF1I.mjs';
import 'kleur/colors';
import { $ as $$Layoutadmin } from '../../chunks/Layoutadmin_CPOIMQNz.mjs';
import 'clsx';
export { renderers } from '../../renderers.mjs';

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$Katalog = createComponent(async ($$result, $$props, $$slots) => {
  return renderTemplate(_a || (_a = __template(["<!-- Simplified HTML & JS for Produk Management -->", '<body class="bg-gray-100 dark:bg-gray-900"> <section class="p-6 max-w-5xl mx-auto bg-white dark:bg-gray-800 rounded-3xl shadow-xl p-8"> <div class="flex justify-between items-start mb-6"> <h1 class="text-4xl font-extrabold text-gray-700 dark:text-white">Manajemen Produk</h1> <button id="add-btn" class="px-6 py-3 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition">Tambah Produk</button> </div> <form id="product-form" class="hidden grid grid-cols-1 md:grid-cols-2 gap-8 mb-10 backdrop-blur-sm bg-white/80 dark:bg-gray-800/80 rounded-xl p-6 shadow-lg opacity-0 -translate-y-4 transition-all duration-300"> <input type="hidden" id="product-id"> <input type="hidden" id="existing-image-url"> <div class="md:col-span-2"> <label for="nama" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Judul Produk</label> <input id="nama" type="text" required placeholder="Masukkan judul" class="w-full px-5 py-3 border-2 rounded-xl bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:border-primary-500 focus:ring-2 focus:ring-primary-300 transition-all duration-300 hover:border-primary-400 shadow-sm"> </div> <div class="md:col-span-2"> <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Kategori</label> <div id="kategori" class="space-y-4"></div> <p id="category-error" class="text-red-500 text-sm mt-1 hidden">Pilih minimal satu kategori!</p> </div> <div class="md:col-span-2"> <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Unggah Gambar</label> <div id="drop-area" class="relative w-full flex flex-col items-center justify-center p-10 border-2 border-dashed border-gray-400 rounded-2xl bg-gray-50 dark:bg-gray-700 hover:border-primary-500 cursor-pointer transition-all duration-300 hover:shadow-xl"> <svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path> </svg> <p class="text-gray-500 dark:text-gray-400">Tarik & Lepas atau klik untuk memilih</p> <input type="file" id="image-file" accept="image/*" class="absolute inset-0 w-full h-full opacity-0 cursor-pointer"> </div> <p id="file-name" class="mt-2 text-sm italic text-gray-600 dark:text-gray-400"></p> <img id="image-preview" class="mt-4 w-full max-h-48 object-contain border rounded-lg shadow hidden"> </div> <div class="md:col-span-2"> <label for="editor" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Deskripsi</label> <div id="editor" class="bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 h-40 rounded-lg"></div> </div> <div class="md:col-span-2 mt-10 flex justify-end space-x-4"> <button type="button" id="cancel-btn" class="px-4 py-2 bg-gray-400 hover:bg-gray-500 text-white rounded-lg hidden">Batal</button> <button type="submit" id="submit-btn" class="px-8 py-3 bg-gradient-to-r from-primary-600 to-purple-600 text-white rounded-xl transition-all duration-300 hover:shadow-lg hover:from-primary-700 hover:to-purple-700 active:scale-95 flex items-center"> <span class="submit-text">Simpan</span> <svg id="loading-spinner" class="hidden w-5 h-5 ml-2 animate-spin" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"> <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle> <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path> </svg> </button> </div> </form> <div class="flex flex-col md:flex-row items-start md:items-center justify-between mb-6 space-y-4 md:space-y-0"> <input id="search-input" type="text" placeholder="Cari produk..." class="w-full md:w-1/2 px-4 py-2 border rounded-lg focus:border-primary-500 dark:bg-gray-800 focus:ring-primary-200 transition"> </div> <div id="products-grid" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6"></div> <div id="pagination" class="flex justify-center items-center space-x-2 mt-6"></div> </section> <div id="notification-container" class="fixed top-4 right-4 z-50 space-y-3"></div> <script type="module">\n    import { createClient } from "https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2/+esm";\n    const SUPABASE_URL = "https://pmfzypvynmyotmvbgafi.supabase.co";\n    const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBtZnp5cHZ5bm15b3RtdmJnYWZpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDYxNTcxNTgsImV4cCI6MjA2MTczMzE1OH0.NimEhbTS9Rz_GGXpEABU_rWunPB6TUN7S4ufTS7FNiM";\n    const sb = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);\n\n    const categoryGroups = {\n      Sublimasi: ["sublimasi-batik", "sublimasi-spanduk", "sublimasi-lanyard", "sublimasi-jersey"],\n      Sablon: ["sablon-jersey", "sablon-kaos", "sablon-dtf", "sablon-plastisol", "sablon-hoodie", "sablon-kemeja", "sablon-seragam", "sablon-jaket", "sablon-batik"],\n      Jahit: ["jahit-kaos", "jahit-hoodie", "jahit-kemeja", "jahit-seragam", "jahit-jaket", "jahit-batik"],\n    };\n\n    let allProducts = [];\n    let currentPage = 1;\n    const pageSize = 8;\n    let searchTerm = "";\n\n    const formEl = document.getElementById("product-form");\n    const grid = document.getElementById("products-grid");\n    const pagDiv = document.getElementById("pagination");\n    const quill = new Quill("#editor", { theme: "snow", modules: { toolbar: [[{ header: [1, 2, 3, false] }], ["bold", "italic", "underline", "strike"], [{ size: ["small", false, "large", "huge"] }], [{ list: "ordered" }, { list: "bullet" }], ["link", "image"], ["clean"], ], }, });\n    const hiddenDesk = Object.assign(document.createElement("input"), { type: "hidden", id: "deskripsi-html", name: "deskripsi" });\n    formEl.appendChild(hiddenDesk);\n\n    document.addEventListener("DOMContentLoaded", () => {\n      if (!localStorage.getItem("staffSession")) return void (window.location.replace("/login"));\n      renderCategoryCheckboxes();\n      resetForm();\n      fetchProducts();\n    });\n\n    window.addEventListener("storage", (e) => e.key === "staffSession" && e.newValue === null && window.location.replace("/login"));\n    \n\n    document.getElementById("search-input").addEventListener("input", (e) => { searchTerm = e.target.value.trim().toLowerCase(); currentPage = 1; renderProductsPage(); });\n\n    document.getElementById("add-btn").addEventListener("click", () => { resetForm(); document.getElementById("cancel-btn").classList.remove("hidden");\n showForm();  });\n    document.getElementById("cancel-btn").addEventListener("click", () => { resetForm(); hideForm(); });\n\n    grid.addEventListener("click", async (e) => { if (e.target.matches(".edit-btn")) await enterEdit(e.target.dataset.id); if (e.target.matches(".delete-btn")) await deleteProduct(e.target.dataset.id); });\n\n    formEl.addEventListener("submit", async (e) => {\n      e.preventDefault();\n      const kategori = getKategori();\n      if (!kategori.length) return void document.getElementById("category-error").classList.remove("hidden");\n      hiddenDesk.value = quill.root.innerHTML.trim();\n      toggleSubmit(true);\n      try {\n        const id = document.getElementById("product-id").value;\n        const nama = document.getElementById("nama").value.trim();\n        let imageUrl = document.getElementById("existing-image-url").value;\n        const file = document.getElementById("image-file").files[0];\n        if (file) {\n          if (imageUrl) {\n            const oldPath = new URL(imageUrl).pathname.split("/").slice(6).join("/");\n            await sb.storage.from("images").remove([oldPath]);\n          }\n          imageUrl = await uploadImage(file);\n        }\n        const dataObj = { nama, slug: slugify(nama), kategori, deskripsi: hiddenDesk.value, gambar: imageUrl };\n        id ? await sb.from("produk").update(dataObj).eq("id", id) : await sb.from("produk").insert([dataObj]);\n        showNotification("success", id ? "Produk berhasil diperbarui!" : "Produk berhasil ditambahkan!");\n        resetForm();\n        fetchProducts();\n      } catch (error) {\n        showNotification("error", "Terjadi kesalahan: " + error.message);\n      } finally {\n        toggleSubmit(false);\n      }\n    });\n\n    function renderCategoryCheckboxes() {\n      const container = document.getElementById("kategori");\n      for (const [group, cats] of Object.entries(categoryGroups)) {\n        const groupDiv = document.createElement("div");\n        const title = document.createElement("h3");\n        title.textContent = group;\n        title.className = "text-lg font-semibold mb-2 dark:text-gray-200";\n        groupDiv.appendChild(title);\n        const gridDiv = document.createElement("div");\n        gridDiv.className = "grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-2 border rounded-lg p-3 bg-white dark:bg-gray-700";\n        for (const cat of cats) {\n          const label = document.createElement("label");\n          label.className = "group flex items-center space-x-3 p-3 rounded-xl bg-white dark:bg-gray-800 shadow-sm hover:shadow-md transition-transform transform hover:-translate-y-1 cursor-pointer";\n          const wrapper = document.createElement("div");\n          wrapper.className = "relative flex items-center justify-center w-5 h-5 rounded-md border-2 border-primary-500 group-hover:border-primary-600";\n          const checkbox = document.createElement("input");\n          checkbox.type = "checkbox";\n          checkbox.value = cat;\n          checkbox.className = "category-checkbox absolute opacity-0 w-5 h-5 cursor-pointer peer";\n          const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");\n          svg.setAttribute("class", "invisible w-4 h-4 text-primary-600 peer-checked:visible");\n          svg.setAttribute("fill", "none");\n          svg.setAttribute("stroke", "currentColor");\n          svg.setAttribute("viewBox", "0 0 24 24");\n          const path = document.createElementNS("http://www.w3.org/2000/svg", "path");\n          path.setAttribute("stroke-linecap", "round");\n          path.setAttribute("stroke-linejoin", "round");\n          path.setAttribute("stroke-width", "3");\n          path.setAttribute("d", "M5 13l4 4L19 7");\n          svg.appendChild(path);\n          const span = document.createElement("span");\n          span.textContent = cat.replace(/^[^-]+-/, "").replace(/(^|\\s)\\S/g, l => l.toUpperCase());\n          span.className = "text-gray-700 dark:text-gray-300 group-hover:text-primary-600 transition-colors font-medium";\n          wrapper.appendChild(checkbox);\n          wrapper.appendChild(svg);\n          label.appendChild(wrapper);\n          label.appendChild(span);\n          gridDiv.appendChild(label);\n        }\n        groupDiv.appendChild(gridDiv);\n        container.appendChild(groupDiv);\n      }\n    }\n\n    async function fetchProducts() {\n      try {\n        const { data, error } = await sb.from("produk").select("*").order("nama", { ascending: true });\n        if (error) throw error;\n        allProducts = data;\n        renderProductsPage();\n      } catch (error) {\n        showNotification("error", "Gagal memuat produk: " + error.message);\n      }\n    }\n\n    function renderProductsPage() {\n      let filtered = allProducts.filter(p => p.nama.toLowerCase().includes(searchTerm) || p.kategori.some(cat => cat.toLowerCase().includes(searchTerm)));\n      const totalPages = Math.ceil(filtered.length / pageSize);\n      const start = (currentPage - 1) * pageSize;\n      const pageItems = filtered.slice(start, start + pageSize);\n      grid.innerHTML = pageItems.map(p => `\n        <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-4 flex flex-col justify-between transition hover:shadow-xl h-full">\n          <img src="${p.gambar}" alt="${p.nama}" class="rounded-xl w-full h-40 object-cover mb-3" loading="lazy" />\n          <div class="flex-1">\n            <h3 class="text-lg font-semibold text-gray-800 dark:text-white mb-1 truncate">${p.nama}</h3>\n            <p class="text-sm text-gray-600 dark:text-gray-400 capitalize">Kategori: ${p.kategori.join(", ")}</p>\n          </div>\n          <div class="mt-4 flex items-center justify-between text-sm font-medium">\n            <button data-id="${p.id}" class="edit-btn text-primary-600 hover:underline">Edit</button>\n            <button data-id="${p.id}" class="delete-btn text-red-500 hover:underline">Hapus</button>\n          </div>\n        </div>\n      `).join("") || `<p class="col-span-full text-center text-gray-500">Produk tidak ditemukan.</p>`;\n      renderPagination(totalPages);\n    }\n\n    function renderPagination(totalPages) {\n      if (totalPages <= 1) return pagDiv.innerHTML = "";\n      let buttons = `\n        <button ${currentPage === 1 ? \'disabled class="opacity-50"\' : \'\'} data-page="${currentPage - 1}" class="px-3 py-1 rounded bg-gray-200 dark:bg-gray-800 hover:bg-gray-300">Prev</button>\n      `;\n      for (let i = 1; i <= totalPages; i++) {\n        buttons += ` <button ${i === currentPage ? \'class="px-3 py-1 rounded bg-primary-600 text-white"\' : `data-page="${i}" class="px-3 py-1 rounded dark:bg-gray-800 bg-gray-200 hover:bg-gray-300"`}>${i}</button>`;\n      }\n      buttons += ` <button ${currentPage === totalPages ? \'disabled class="opacity-50"\' : \'\'} data-page="${currentPage + 1}" class="px-3 py-1 rounded dark:bg-gray-800 bg-gray-200 hover:bg-gray-300">Next</button>`;\n      pagDiv.innerHTML = buttons;\n      pagDiv.querySelectorAll("button[data-page]").forEach(btn => btn.addEventListener("click", () => { currentPage = Number(btn.getAttribute("data-page")); renderProductsPage(); }));\n    }\n\n    function resetForm() {\n      formEl.reset();\n      document.getElementById("product-id").value = "";\n      document.getElementById("existing-image-url").value = "";\n      document.getElementById("file-name").textContent = "";\n      document.getElementById("image-preview").classList.add("hidden");\n      document.getElementById("cancel-btn").classList.add("hidden");\n      document.querySelector(".submit-text").textContent = "Simpan";\n      document.getElementById("category-error").classList.add("hidden");\n      quill.root.innerHTML = "";\n      document.querySelectorAll(".category-checkbox").forEach(cb => cb.checked = false);\n    }\n\n    function showForm() {\n      formEl.classList.remove("hidden");\n      requestAnimationFrame(() => { formEl.classList.remove("opacity-0", "-translate-y-4"); formEl.classList.add("opacity-100", "translate-y-0"); });\n      formEl.scrollIntoView({ behavior: "smooth", block: "center" });\n    }\n\n    function hideForm() {\n      formEl.classList.remove("opacity-100", "translate-y-0");\n      formEl.classList.add("opacity-0", "-translate-y-4");\n      formEl.addEventListener("transitionend", () => formEl.classList.add("hidden"), { once: true });\n    }\n\n    async function enterEdit(id) {\n      try {\n        const { data, error } = await sb.from("produk").select("*").eq("id", id).single();\n        if (error) throw error;\n        document.getElementById("product-id").value = data.id;\n        document.getElementById("nama").value = data.nama;\n        document.getElementById("existing-image-url").value = data.gambar;\n        quill.root.innerHTML = data.deskripsi;\n        document.querySelectorAll(".category-checkbox").forEach(cb => { cb.checked = data.kategori.includes(cb.value); });\n        const imgPrev = document.getElementById("image-preview");\n        imgPrev.src = data.gambar;\n        imgPrev.classList.remove("hidden");\n        document.getElementById("file-name").textContent = "Gambar saat ini: " + data.gambar.split("/").pop();\n        document.querySelector(".submit-text").textContent = "Update";\n        document.getElementById("cancel-btn").classList.remove("hidden");\n        showForm();\n      } catch (error) {\n        showNotification("error", "Gagal memuat produk: " + error.message);\n      }\n    }\n\n    async function deleteProduct(id) {\n      if (!confirm("Apakah Anda yakin ingin menghapus produk ini?")) return;\n      try {\n        const { data } = await sb.from("produk").select("gambar").eq("id", id).single();\n        if (data?.gambar) {\n          const oldPath = new URL(data.gambar).pathname.split("/").slice(6).join("/");\n          await sb.storage.from("images").remove([oldPath]);\n        }\n        await sb.from("produk").delete().eq("id", id);\n        fetchProducts();\n        showNotification("success", "Produk berhasil dihapus!");\n      } catch (error) {\n        showNotification("error", "Gagal menghapus produk: " + error.message);\n      }\n    }\n\n    async function uploadImage(file) {\n      const path = `produk/${Date.now()}_${file.name}`;\n      const { data, error } = await sb.storage.from("images").upload(path, file, { cacheControl: "3600", upsert: false });\n      if (error) throw error;\n      return sb.storage.from("images").getPublicUrl(data.path).data.publicUrl;\n    }\n\n    function getKategori() {\n      return Array.from(document.querySelectorAll(".category-checkbox:checked")).map(cb => cb.value);\n    }\n\n    function slugify(str) {\n      return str.toString().normalize("NFKD").replace(/[^\\w\\s-]/g, "").toLowerCase().trim().replace(/[^a-z0-9]+/g, "-").replace(/^-+|-+$/g, "");\n    }\n\n    function toggleSubmit(isLoading) {\n      const submitBtn = document.getElementById("submit-btn");\n      const spinner = document.getElementById("loading-spinner");\n      submitBtn.disabled = isLoading;\n      spinner.classList.toggle("hidden", !isLoading);\n      document.getElementById("category-error").classList.add("hidden");\n    }\n\n    // Drag & Drop Image Preview\n    const dropArea = document.getElementById("drop-area");\n    const fileInput = document.getElementById("image-file");\n    const fileNameEl = document.getElementById("file-name");\n    const imgPrev = document.getElementById("image-preview");\n\n    dropArea.addEventListener("click", (e) => { if (e.target === dropArea) fileInput.click(); });\n    fileInput.addEventListener("change", () => {\n      const file = fileInput.files[0];\n      if (file) {\n        fileNameEl.textContent = file.name;\n        const reader = new FileReader();\n        reader.onload = (e) => { imgPrev.src = e.target.result; imgPrev.classList.remove("hidden"); };\n        reader.readAsDataURL(file);\n      }\n    });\n    ["dragover", "dragleave", "drop"].forEach(event => {\n      dropArea.addEventListener(event, (e) => {\n        e.preventDefault();\n        dropArea.classList.toggle("border-primary-500", event === "dragover");\n        if (event === "drop") {\n          const file = e.dataTransfer.files[0];\n          if (file && file.type.startsWith("image/")) {\n            fileInput.files = e.dataTransfer.files;\n            fileNameEl.textContent = file.name;\n            const reader = new FileReader();\n            reader.onload = (ev) => { imgPrev.src = ev.target.result; imgPrev.classList.remove("hidden"); };\n            reader.readAsDataURL(file);\n          }\n        }\n      });\n    });\n\n    // Notification\n    function showNotification(type, message) {\n      const container = document.getElementById("notification-container");\n      const notification = document.createElement("div");\n      notification.className = `p-4 rounded-lg shadow-lg transform transition-all duration-300 ${type === "success" ? "bg-green-50 border-l-4 border-green-500 text-green-700" : type === "error" ? "bg-red-50 border-l-4 border-red-500 text-red-700" : "bg-yellow-50 border-l-4 border-yellow-500 text-yellow-700"}`;\n      notification.innerHTML = `<div class="flex items-start"><svg class="h-6 w-6 mr-2 ${type === "success" ? "text-green-500" : type === "error" ? "text-red-500" : "text-yellow-500"}" fill="none" viewBox="0 0 24 24" stroke="currentColor">${type === "success" ? `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />` : type === "error" ? `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />` : `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />`}</svg><div>${message}</div></div>`;\n      container.appendChild(notification);\n      setTimeout(() => { notification.classList.add("opacity-100", "translate-x-0"); }, 10);\n      setTimeout(() => { notification.classList.remove("opacity-100", "translate-x-0"); notification.classList.add("opacity-0", "translate-x-full"); setTimeout(() => container.removeChild(notification), 300); }, 5000);\n      notification.addEventListener("click", () => { notification.classList.remove("opacity-100", "translate-x-0"); notification.classList.add("opacity-0", "translate-x-full"); setTimeout(() => container.removeChild(notification), 300); });\n    }\n  <\/script> </body> '], ["<!-- Simplified HTML & JS for Produk Management -->", '<body class="bg-gray-100 dark:bg-gray-900"> <section class="p-6 max-w-5xl mx-auto bg-white dark:bg-gray-800 rounded-3xl shadow-xl p-8"> <div class="flex justify-between items-start mb-6"> <h1 class="text-4xl font-extrabold text-gray-700 dark:text-white">Manajemen Produk</h1> <button id="add-btn" class="px-6 py-3 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition">Tambah Produk</button> </div> <form id="product-form" class="hidden grid grid-cols-1 md:grid-cols-2 gap-8 mb-10 backdrop-blur-sm bg-white/80 dark:bg-gray-800/80 rounded-xl p-6 shadow-lg opacity-0 -translate-y-4 transition-all duration-300"> <input type="hidden" id="product-id"> <input type="hidden" id="existing-image-url"> <div class="md:col-span-2"> <label for="nama" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Judul Produk</label> <input id="nama" type="text" required placeholder="Masukkan judul" class="w-full px-5 py-3 border-2 rounded-xl bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:border-primary-500 focus:ring-2 focus:ring-primary-300 transition-all duration-300 hover:border-primary-400 shadow-sm"> </div> <div class="md:col-span-2"> <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Kategori</label> <div id="kategori" class="space-y-4"></div> <p id="category-error" class="text-red-500 text-sm mt-1 hidden">Pilih minimal satu kategori!</p> </div> <div class="md:col-span-2"> <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Unggah Gambar</label> <div id="drop-area" class="relative w-full flex flex-col items-center justify-center p-10 border-2 border-dashed border-gray-400 rounded-2xl bg-gray-50 dark:bg-gray-700 hover:border-primary-500 cursor-pointer transition-all duration-300 hover:shadow-xl"> <svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path> </svg> <p class="text-gray-500 dark:text-gray-400">Tarik & Lepas atau klik untuk memilih</p> <input type="file" id="image-file" accept="image/*" class="absolute inset-0 w-full h-full opacity-0 cursor-pointer"> </div> <p id="file-name" class="mt-2 text-sm italic text-gray-600 dark:text-gray-400"></p> <img id="image-preview" class="mt-4 w-full max-h-48 object-contain border rounded-lg shadow hidden"> </div> <div class="md:col-span-2"> <label for="editor" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Deskripsi</label> <div id="editor" class="bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 h-40 rounded-lg"></div> </div> <div class="md:col-span-2 mt-10 flex justify-end space-x-4"> <button type="button" id="cancel-btn" class="px-4 py-2 bg-gray-400 hover:bg-gray-500 text-white rounded-lg hidden">Batal</button> <button type="submit" id="submit-btn" class="px-8 py-3 bg-gradient-to-r from-primary-600 to-purple-600 text-white rounded-xl transition-all duration-300 hover:shadow-lg hover:from-primary-700 hover:to-purple-700 active:scale-95 flex items-center"> <span class="submit-text">Simpan</span> <svg id="loading-spinner" class="hidden w-5 h-5 ml-2 animate-spin" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"> <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle> <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path> </svg> </button> </div> </form> <div class="flex flex-col md:flex-row items-start md:items-center justify-between mb-6 space-y-4 md:space-y-0"> <input id="search-input" type="text" placeholder="Cari produk..." class="w-full md:w-1/2 px-4 py-2 border rounded-lg focus:border-primary-500 dark:bg-gray-800 focus:ring-primary-200 transition"> </div> <div id="products-grid" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6"></div> <div id="pagination" class="flex justify-center items-center space-x-2 mt-6"></div> </section> <div id="notification-container" class="fixed top-4 right-4 z-50 space-y-3"></div> <script type="module">\n    import { createClient } from "https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2/+esm";\n    const SUPABASE_URL = "https://pmfzypvynmyotmvbgafi.supabase.co";\n    const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBtZnp5cHZ5bm15b3RtdmJnYWZpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDYxNTcxNTgsImV4cCI6MjA2MTczMzE1OH0.NimEhbTS9Rz_GGXpEABU_rWunPB6TUN7S4ufTS7FNiM";\n    const sb = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);\n\n    const categoryGroups = {\n      Sublimasi: ["sublimasi-batik", "sublimasi-spanduk", "sublimasi-lanyard", "sublimasi-jersey"],\n      Sablon: ["sablon-jersey", "sablon-kaos", "sablon-dtf", "sablon-plastisol", "sablon-hoodie", "sablon-kemeja", "sablon-seragam", "sablon-jaket", "sablon-batik"],\n      Jahit: ["jahit-kaos", "jahit-hoodie", "jahit-kemeja", "jahit-seragam", "jahit-jaket", "jahit-batik"],\n    };\n\n    let allProducts = [];\n    let currentPage = 1;\n    const pageSize = 8;\n    let searchTerm = "";\n\n    const formEl = document.getElementById("product-form");\n    const grid = document.getElementById("products-grid");\n    const pagDiv = document.getElementById("pagination");\n    const quill = new Quill("#editor", { theme: "snow", modules: { toolbar: [[{ header: [1, 2, 3, false] }], ["bold", "italic", "underline", "strike"], [{ size: ["small", false, "large", "huge"] }], [{ list: "ordered" }, { list: "bullet" }], ["link", "image"], ["clean"], ], }, });\n    const hiddenDesk = Object.assign(document.createElement("input"), { type: "hidden", id: "deskripsi-html", name: "deskripsi" });\n    formEl.appendChild(hiddenDesk);\n\n    document.addEventListener("DOMContentLoaded", () => {\n      if (!localStorage.getItem("staffSession")) return void (window.location.replace("/login"));\n      renderCategoryCheckboxes();\n      resetForm();\n      fetchProducts();\n    });\n\n    window.addEventListener("storage", (e) => e.key === "staffSession" && e.newValue === null && window.location.replace("/login"));\n    \n\n    document.getElementById("search-input").addEventListener("input", (e) => { searchTerm = e.target.value.trim().toLowerCase(); currentPage = 1; renderProductsPage(); });\n\n    document.getElementById("add-btn").addEventListener("click", () => { resetForm(); document.getElementById("cancel-btn").classList.remove("hidden");\n showForm();  });\n    document.getElementById("cancel-btn").addEventListener("click", () => { resetForm(); hideForm(); });\n\n    grid.addEventListener("click", async (e) => { if (e.target.matches(".edit-btn")) await enterEdit(e.target.dataset.id); if (e.target.matches(".delete-btn")) await deleteProduct(e.target.dataset.id); });\n\n    formEl.addEventListener("submit", async (e) => {\n      e.preventDefault();\n      const kategori = getKategori();\n      if (!kategori.length) return void document.getElementById("category-error").classList.remove("hidden");\n      hiddenDesk.value = quill.root.innerHTML.trim();\n      toggleSubmit(true);\n      try {\n        const id = document.getElementById("product-id").value;\n        const nama = document.getElementById("nama").value.trim();\n        let imageUrl = document.getElementById("existing-image-url").value;\n        const file = document.getElementById("image-file").files[0];\n        if (file) {\n          if (imageUrl) {\n            const oldPath = new URL(imageUrl).pathname.split("/").slice(6).join("/");\n            await sb.storage.from("images").remove([oldPath]);\n          }\n          imageUrl = await uploadImage(file);\n        }\n        const dataObj = { nama, slug: slugify(nama), kategori, deskripsi: hiddenDesk.value, gambar: imageUrl };\n        id ? await sb.from("produk").update(dataObj).eq("id", id) : await sb.from("produk").insert([dataObj]);\n        showNotification("success", id ? "Produk berhasil diperbarui!" : "Produk berhasil ditambahkan!");\n        resetForm();\n        fetchProducts();\n      } catch (error) {\n        showNotification("error", "Terjadi kesalahan: " + error.message);\n      } finally {\n        toggleSubmit(false);\n      }\n    });\n\n    function renderCategoryCheckboxes() {\n      const container = document.getElementById("kategori");\n      for (const [group, cats] of Object.entries(categoryGroups)) {\n        const groupDiv = document.createElement("div");\n        const title = document.createElement("h3");\n        title.textContent = group;\n        title.className = "text-lg font-semibold mb-2 dark:text-gray-200";\n        groupDiv.appendChild(title);\n        const gridDiv = document.createElement("div");\n        gridDiv.className = "grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-2 border rounded-lg p-3 bg-white dark:bg-gray-700";\n        for (const cat of cats) {\n          const label = document.createElement("label");\n          label.className = "group flex items-center space-x-3 p-3 rounded-xl bg-white dark:bg-gray-800 shadow-sm hover:shadow-md transition-transform transform hover:-translate-y-1 cursor-pointer";\n          const wrapper = document.createElement("div");\n          wrapper.className = "relative flex items-center justify-center w-5 h-5 rounded-md border-2 border-primary-500 group-hover:border-primary-600";\n          const checkbox = document.createElement("input");\n          checkbox.type = "checkbox";\n          checkbox.value = cat;\n          checkbox.className = "category-checkbox absolute opacity-0 w-5 h-5 cursor-pointer peer";\n          const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");\n          svg.setAttribute("class", "invisible w-4 h-4 text-primary-600 peer-checked:visible");\n          svg.setAttribute("fill", "none");\n          svg.setAttribute("stroke", "currentColor");\n          svg.setAttribute("viewBox", "0 0 24 24");\n          const path = document.createElementNS("http://www.w3.org/2000/svg", "path");\n          path.setAttribute("stroke-linecap", "round");\n          path.setAttribute("stroke-linejoin", "round");\n          path.setAttribute("stroke-width", "3");\n          path.setAttribute("d", "M5 13l4 4L19 7");\n          svg.appendChild(path);\n          const span = document.createElement("span");\n          span.textContent = cat.replace(/^[^-]+-/, "").replace(/(^|\\\\s)\\\\S/g, l => l.toUpperCase());\n          span.className = "text-gray-700 dark:text-gray-300 group-hover:text-primary-600 transition-colors font-medium";\n          wrapper.appendChild(checkbox);\n          wrapper.appendChild(svg);\n          label.appendChild(wrapper);\n          label.appendChild(span);\n          gridDiv.appendChild(label);\n        }\n        groupDiv.appendChild(gridDiv);\n        container.appendChild(groupDiv);\n      }\n    }\n\n    async function fetchProducts() {\n      try {\n        const { data, error } = await sb.from("produk").select("*").order("nama", { ascending: true });\n        if (error) throw error;\n        allProducts = data;\n        renderProductsPage();\n      } catch (error) {\n        showNotification("error", "Gagal memuat produk: " + error.message);\n      }\n    }\n\n    function renderProductsPage() {\n      let filtered = allProducts.filter(p => p.nama.toLowerCase().includes(searchTerm) || p.kategori.some(cat => cat.toLowerCase().includes(searchTerm)));\n      const totalPages = Math.ceil(filtered.length / pageSize);\n      const start = (currentPage - 1) * pageSize;\n      const pageItems = filtered.slice(start, start + pageSize);\n      grid.innerHTML = pageItems.map(p => \\`\n        <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-4 flex flex-col justify-between transition hover:shadow-xl h-full">\n          <img src="\\${p.gambar}" alt="\\${p.nama}" class="rounded-xl w-full h-40 object-cover mb-3" loading="lazy" />\n          <div class="flex-1">\n            <h3 class="text-lg font-semibold text-gray-800 dark:text-white mb-1 truncate">\\${p.nama}</h3>\n            <p class="text-sm text-gray-600 dark:text-gray-400 capitalize">Kategori: \\${p.kategori.join(", ")}</p>\n          </div>\n          <div class="mt-4 flex items-center justify-between text-sm font-medium">\n            <button data-id="\\${p.id}" class="edit-btn text-primary-600 hover:underline">Edit</button>\n            <button data-id="\\${p.id}" class="delete-btn text-red-500 hover:underline">Hapus</button>\n          </div>\n        </div>\n      \\`).join("") || \\`<p class="col-span-full text-center text-gray-500">Produk tidak ditemukan.</p>\\`;\n      renderPagination(totalPages);\n    }\n\n    function renderPagination(totalPages) {\n      if (totalPages <= 1) return pagDiv.innerHTML = "";\n      let buttons = \\`\n        <button \\${currentPage === 1 ? \'disabled class="opacity-50"\' : \'\'} data-page="\\${currentPage - 1}" class="px-3 py-1 rounded bg-gray-200 dark:bg-gray-800 hover:bg-gray-300">Prev</button>\n      \\`;\n      for (let i = 1; i <= totalPages; i++) {\n        buttons += \\` <button \\${i === currentPage ? \'class="px-3 py-1 rounded bg-primary-600 text-white"\' : \\`data-page="\\${i}" class="px-3 py-1 rounded dark:bg-gray-800 bg-gray-200 hover:bg-gray-300"\\`}>\\${i}</button>\\`;\n      }\n      buttons += \\` <button \\${currentPage === totalPages ? \'disabled class="opacity-50"\' : \'\'} data-page="\\${currentPage + 1}" class="px-3 py-1 rounded dark:bg-gray-800 bg-gray-200 hover:bg-gray-300">Next</button>\\`;\n      pagDiv.innerHTML = buttons;\n      pagDiv.querySelectorAll("button[data-page]").forEach(btn => btn.addEventListener("click", () => { currentPage = Number(btn.getAttribute("data-page")); renderProductsPage(); }));\n    }\n\n    function resetForm() {\n      formEl.reset();\n      document.getElementById("product-id").value = "";\n      document.getElementById("existing-image-url").value = "";\n      document.getElementById("file-name").textContent = "";\n      document.getElementById("image-preview").classList.add("hidden");\n      document.getElementById("cancel-btn").classList.add("hidden");\n      document.querySelector(".submit-text").textContent = "Simpan";\n      document.getElementById("category-error").classList.add("hidden");\n      quill.root.innerHTML = "";\n      document.querySelectorAll(".category-checkbox").forEach(cb => cb.checked = false);\n    }\n\n    function showForm() {\n      formEl.classList.remove("hidden");\n      requestAnimationFrame(() => { formEl.classList.remove("opacity-0", "-translate-y-4"); formEl.classList.add("opacity-100", "translate-y-0"); });\n      formEl.scrollIntoView({ behavior: "smooth", block: "center" });\n    }\n\n    function hideForm() {\n      formEl.classList.remove("opacity-100", "translate-y-0");\n      formEl.classList.add("opacity-0", "-translate-y-4");\n      formEl.addEventListener("transitionend", () => formEl.classList.add("hidden"), { once: true });\n    }\n\n    async function enterEdit(id) {\n      try {\n        const { data, error } = await sb.from("produk").select("*").eq("id", id).single();\n        if (error) throw error;\n        document.getElementById("product-id").value = data.id;\n        document.getElementById("nama").value = data.nama;\n        document.getElementById("existing-image-url").value = data.gambar;\n        quill.root.innerHTML = data.deskripsi;\n        document.querySelectorAll(".category-checkbox").forEach(cb => { cb.checked = data.kategori.includes(cb.value); });\n        const imgPrev = document.getElementById("image-preview");\n        imgPrev.src = data.gambar;\n        imgPrev.classList.remove("hidden");\n        document.getElementById("file-name").textContent = "Gambar saat ini: " + data.gambar.split("/").pop();\n        document.querySelector(".submit-text").textContent = "Update";\n        document.getElementById("cancel-btn").classList.remove("hidden");\n        showForm();\n      } catch (error) {\n        showNotification("error", "Gagal memuat produk: " + error.message);\n      }\n    }\n\n    async function deleteProduct(id) {\n      if (!confirm("Apakah Anda yakin ingin menghapus produk ini?")) return;\n      try {\n        const { data } = await sb.from("produk").select("gambar").eq("id", id).single();\n        if (data?.gambar) {\n          const oldPath = new URL(data.gambar).pathname.split("/").slice(6).join("/");\n          await sb.storage.from("images").remove([oldPath]);\n        }\n        await sb.from("produk").delete().eq("id", id);\n        fetchProducts();\n        showNotification("success", "Produk berhasil dihapus!");\n      } catch (error) {\n        showNotification("error", "Gagal menghapus produk: " + error.message);\n      }\n    }\n\n    async function uploadImage(file) {\n      const path = \\`produk/\\${Date.now()}_\\${file.name}\\`;\n      const { data, error } = await sb.storage.from("images").upload(path, file, { cacheControl: "3600", upsert: false });\n      if (error) throw error;\n      return sb.storage.from("images").getPublicUrl(data.path).data.publicUrl;\n    }\n\n    function getKategori() {\n      return Array.from(document.querySelectorAll(".category-checkbox:checked")).map(cb => cb.value);\n    }\n\n    function slugify(str) {\n      return str.toString().normalize("NFKD").replace(/[^\\\\w\\\\s-]/g, "").toLowerCase().trim().replace(/[^a-z0-9]+/g, "-").replace(/^-+|-+$/g, "");\n    }\n\n    function toggleSubmit(isLoading) {\n      const submitBtn = document.getElementById("submit-btn");\n      const spinner = document.getElementById("loading-spinner");\n      submitBtn.disabled = isLoading;\n      spinner.classList.toggle("hidden", !isLoading);\n      document.getElementById("category-error").classList.add("hidden");\n    }\n\n    // Drag & Drop Image Preview\n    const dropArea = document.getElementById("drop-area");\n    const fileInput = document.getElementById("image-file");\n    const fileNameEl = document.getElementById("file-name");\n    const imgPrev = document.getElementById("image-preview");\n\n    dropArea.addEventListener("click", (e) => { if (e.target === dropArea) fileInput.click(); });\n    fileInput.addEventListener("change", () => {\n      const file = fileInput.files[0];\n      if (file) {\n        fileNameEl.textContent = file.name;\n        const reader = new FileReader();\n        reader.onload = (e) => { imgPrev.src = e.target.result; imgPrev.classList.remove("hidden"); };\n        reader.readAsDataURL(file);\n      }\n    });\n    ["dragover", "dragleave", "drop"].forEach(event => {\n      dropArea.addEventListener(event, (e) => {\n        e.preventDefault();\n        dropArea.classList.toggle("border-primary-500", event === "dragover");\n        if (event === "drop") {\n          const file = e.dataTransfer.files[0];\n          if (file && file.type.startsWith("image/")) {\n            fileInput.files = e.dataTransfer.files;\n            fileNameEl.textContent = file.name;\n            const reader = new FileReader();\n            reader.onload = (ev) => { imgPrev.src = ev.target.result; imgPrev.classList.remove("hidden"); };\n            reader.readAsDataURL(file);\n          }\n        }\n      });\n    });\n\n    // Notification\n    function showNotification(type, message) {\n      const container = document.getElementById("notification-container");\n      const notification = document.createElement("div");\n      notification.className = \\`p-4 rounded-lg shadow-lg transform transition-all duration-300 \\${type === "success" ? "bg-green-50 border-l-4 border-green-500 text-green-700" : type === "error" ? "bg-red-50 border-l-4 border-red-500 text-red-700" : "bg-yellow-50 border-l-4 border-yellow-500 text-yellow-700"}\\`;\n      notification.innerHTML = \\`<div class="flex items-start"><svg class="h-6 w-6 mr-2 \\${type === "success" ? "text-green-500" : type === "error" ? "text-red-500" : "text-yellow-500"}" fill="none" viewBox="0 0 24 24" stroke="currentColor">\\${type === "success" ? \\`<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />\\` : type === "error" ? \\`<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />\\` : \\`<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />\\`}</svg><div>\\${message}</div></div>\\`;\n      container.appendChild(notification);\n      setTimeout(() => { notification.classList.add("opacity-100", "translate-x-0"); }, 10);\n      setTimeout(() => { notification.classList.remove("opacity-100", "translate-x-0"); notification.classList.add("opacity-0", "translate-x-full"); setTimeout(() => container.removeChild(notification), 300); }, 5000);\n      notification.addEventListener("click", () => { notification.classList.remove("opacity-100", "translate-x-0"); notification.classList.add("opacity-0", "translate-x-full"); setTimeout(() => container.removeChild(notification), 300); });\n    }\n  <\/script> </body> '])), maybeRenderHead());
}, "Z:/WEB/kp-dyesablon-main/src/components/admin/Katalog.astro", void 0);

const $$Index = createComponent(($$result, $$props, $$slots) => {
  return renderTemplate`${renderComponent($$result, "Layout", $$Layoutadmin, { "title": "Katalog" }, { "default": ($$result2) => renderTemplate` ${maybeRenderHead()}<main> ${renderComponent($$result2, "Katalog", $$Katalog, {})} </main> ` })}`;
}, "Z:/WEB/kp-dyesablon-main/src/pages/admin/katalog/index.astro", void 0);

const $$file = "Z:/WEB/kp-dyesablon-main/src/pages/admin/katalog/index.astro";
const $$url = "/admin/katalog";

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: $$Index,
  file: $$file,
  url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

const page = () => _page;

export { page };
