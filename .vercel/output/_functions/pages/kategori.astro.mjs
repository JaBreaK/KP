import { c as createComponent, g as renderComponent, r as renderTemplate, f as addAttribute, m as maybeRenderHead } from '../chunks/astro/server_vBMvLF1I.mjs';
import 'kleur/colors';
import { $ as $$Layout } from '../chunks/Layout_FftcqvzB.mjs';
import { a as $$Footer, $ as $$Header } from '../chunks/Footer_fB5ZvKgw.mjs';
import { $ as $$HeroSection } from '../chunks/HeroSection_CgHEO-KX.mjs';
import { $ as $$Wapop } from '../chunks/wapop_BfPtY1iM.mjs';
import { s as supabase } from '../chunks/supabase_Bue7KAyD.mjs';
export { renderers } from '../renderers.mjs';

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$Kategori = createComponent(async ($$result, $$props, $$slots) => {
  const { data: posts = [], error: postError } = await supabase.from("produk").select("*");
  if (postError) console.error("Gagal ambil produk:", postError.message);
  const { data: kategoriData = [], error: kategoriError } = await supabase.from("kategori").select("*");
  if (kategoriError) console.error("Gagal ambil kategori:", kategoriError.message);
  const categories = kategoriData.filter((k) => !k.parent_slug).map((parent) => ({
    name: parent.name,
    slug: parent.slug,
    subcategories: kategoriData.filter((sub) => sub.parent_slug === parent.slug).map((sub) => ({ name: sub.name, slug: sub.slug }))
  }));
  return renderTemplate`${renderComponent($$result, "Layout", $$Layout, { "title": "Kategori - Dye Apparel", "description": "Filter produk berdasarkan kategori dengan tombol Apply" }, { "default": async ($$result2) => renderTemplate(_a || (_a = __template([" ", " ", '<main class="container-custom flex flex-col lg:flex-row py-8 gap-8"> <!-- Sidebar untuk filter kategori (versi baru) --> <aside id="sidebar" class="w-full lg:w-1/4 bg-white dark:bg-gray-800 rounded-xl p-6 shadow-md\n             transition-all duration-500 ease-in-out transform animate-fade-in"> <h2 class="text-xl font-semibold text-gray-900 dark:text-gray-100">Filter</h2> <hr class="border-gray-200 dark:border-gray-700 my-4"> <form id="category-filter-form" class="space-y-4"> ', ' <div class="flex gap-2 mt-10"> <button id="apply-filter-btn" type="button" class="flex-1 px-4 py-2 bg-primary-600 text-white rounded \n                   hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500 \n                   transition-all duration-300">\nApply\n</button> <button id="reset-filter-btn" type="button" class="flex-1 px-4 py-2 bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 \n                   rounded hover:bg-gray-300 dark:hover:bg-gray-600 \n                   focus:outline-none focus:ring-2 focus:ring-gray-400 \n                   transition-all duration-300">\nReset\n</button> </div> </form> </aside> <!-- Konten utama: Daftar produk --> <section class="w-full lg:w-3/4"> <div data-animate="fade-in-scale"', "> ", ' </div> <div id="product-grid" class="grid md:grid-cols-2 lg:grid-cols-3 gap-6 mt-6 transition-opacity duration-300"> ', ' </div> <div id="pagination" class="flex justify-center items-center space-x-2 mt-8"></div> </section> </main> ', " ", "  <script type=\"module\">\n  function initFilter() {\n    const form = document.getElementById('category-filter-form');\n    const applyBtn = document.getElementById('apply-filter-btn');\n    const resetBtn = document.getElementById('reset-filter-btn');\n    const grid = document.getElementById('product-grid');\n    let cards = Array.from(grid.querySelectorAll('.card'));\n    const paginationEl = document.getElementById('pagination');\n    let currentPage = 1;\n    const pageSize = 9;\n\n    function renderPagination(totalPages) {\n      if (totalPages <= 1) {\n        paginationEl.innerHTML = '';\n        return;\n      }\n      let html = '';\n      html += `<button ${\n        currentPage === 1 ? 'disabled' : ''\n      } data-page=\"${currentPage - 1}\" class=\"px-3 py-1 rounded bg-gray-200 dark:bg-gray-800 hover:bg-gray-300\">Prev</button>`;\n\n      for (let i = 1; i <= totalPages; i++) {\n        html += `<button ${\n          i === currentPage\n            ? 'class=\"px-3 py-1 rounded bg-primary-600 text-white\"'\n            : `data-page=\"${i}\" class=\"px-3 py-1 dark:bg-gray-800 rounded bg-gray-200 hover:bg-gray-300\"`\n        }> ${i} </button>`;\n      }\n\n      html += `<button ${\n        currentPage === totalPages ? 'disabled' : ''\n      } data-page=\"${currentPage + 1}\" class=\"px-3 py-1 rounded bg-gray-200 hover:bg-gray-300 dark:bg-gray-800\">Next</button>`;\n      paginationEl.innerHTML = html;\n\n      paginationEl\n        .querySelectorAll('button[data-page]')\n        .forEach((btn) =>\n          btn.addEventListener('click', () => {\n            currentPage = +btn.dataset.page;\n            applyFilter();\n          })\n        );\n    }\n\n    function updateDisplay() {\n      // Ambil semua nilai checkbox yang dicentang\n      const checked = Array.from(form.elements['category'])\n        .filter((i) => i.checked)\n        .map((i) => i.value);\n\n      // Filter card berdasarkan category yang dicentang\n      let filtered = cards.filter((c) =>\n        !checked.length ||\n        c.dataset.categories.split(' ').some((cat) => checked.includes(cat))\n      );\n\n      // Sembunyikan semua kartu dulu\n      cards.forEach((c) => (c.style.display = 'none'));\n\n      // Hitung paginasi dan tampilkan kartu sesuai halaman\n      const totalPages = Math.ceil(filtered.length / pageSize);\n      const start = (currentPage - 1) * pageSize;\n\n      filtered.slice(start, start + pageSize).forEach((c, idx) => {\n        c.style.display = 'block';\n        c.dataset.animate = 'fade-in-scale';\n        c.dataset.delay = `${idx * 100}`;\n      });\n\n      renderPagination(totalPages);\n    }\n\n    function applyFilter() {\n      grid.classList.add('opacity-0');\n      grid.addEventListener(\n        'transitionend',\n        function handler() {\n          grid.removeEventListener('transitionend', handler);\n          updateDisplay();\n          requestAnimationFrame(() => grid.classList.remove('opacity-0'));\n          initScrollAnimations(); // panggil animasi setelah fade-in\n        },\n        { once: true }\n      );\n    }\n\n    // Event Listener tombol Apply\n    applyBtn.addEventListener('click', () => {\n      currentPage = 1;\n      applyFilter();\n      const params = Array.from(form.elements['category'])\n        .filter((i) => i.checked)\n        .map((i) => i.value)\n        .join(',');\n      history.replaceState(\n        null,\n        '',\n        window.location.pathname + (params ? `?category=${params}` : '')\n      );\n    });\n\n    // Event Listener tombol Reset\n    resetBtn.addEventListener('click', (e) => {\n      e.preventDefault();\n      form.querySelectorAll('input').forEach((i) => (i.checked = false));\n      applyBtn.click();\n    });\n\n    // Inisialisasi checkbox dari URL (jika ada parameter)\n    const params = new URLSearchParams(window.location.search);\n    const arr = params.get('category')?.split(',') || [];\n    document\n      .querySelectorAll('input[name=\"category\"]')\n      .forEach((i) => {\n        i.checked = arr.includes(i.value);\n      });\n\n    // === Perubahan utama di sini ===\n    // Tampilkan semua produk langsung, tanpa opacity-0, ketika pertama kali load\n    updateDisplay();\n    initScrollAnimations();\n    // ============================== \n  }\n\n  document.addEventListener('astro:page-load', () => {\n    initFilter();\n  });\n<\/script> "], [" ", " ", '<main class="container-custom flex flex-col lg:flex-row py-8 gap-8"> <!-- Sidebar untuk filter kategori (versi baru) --> <aside id="sidebar" class="w-full lg:w-1/4 bg-white dark:bg-gray-800 rounded-xl p-6 shadow-md\n             transition-all duration-500 ease-in-out transform animate-fade-in"> <h2 class="text-xl font-semibold text-gray-900 dark:text-gray-100">Filter</h2> <hr class="border-gray-200 dark:border-gray-700 my-4"> <form id="category-filter-form" class="space-y-4"> ', ' <div class="flex gap-2 mt-10"> <button id="apply-filter-btn" type="button" class="flex-1 px-4 py-2 bg-primary-600 text-white rounded \n                   hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500 \n                   transition-all duration-300">\nApply\n</button> <button id="reset-filter-btn" type="button" class="flex-1 px-4 py-2 bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 \n                   rounded hover:bg-gray-300 dark:hover:bg-gray-600 \n                   focus:outline-none focus:ring-2 focus:ring-gray-400 \n                   transition-all duration-300">\nReset\n</button> </div> </form> </aside> <!-- Konten utama: Daftar produk --> <section class="w-full lg:w-3/4"> <div data-animate="fade-in-scale"', "> ", ' </div> <div id="product-grid" class="grid md:grid-cols-2 lg:grid-cols-3 gap-6 mt-6 transition-opacity duration-300"> ', ' </div> <div id="pagination" class="flex justify-center items-center space-x-2 mt-8"></div> </section> </main> ', " ", "  <script type=\"module\">\n  function initFilter() {\n    const form = document.getElementById('category-filter-form');\n    const applyBtn = document.getElementById('apply-filter-btn');\n    const resetBtn = document.getElementById('reset-filter-btn');\n    const grid = document.getElementById('product-grid');\n    let cards = Array.from(grid.querySelectorAll('.card'));\n    const paginationEl = document.getElementById('pagination');\n    let currentPage = 1;\n    const pageSize = 9;\n\n    function renderPagination(totalPages) {\n      if (totalPages <= 1) {\n        paginationEl.innerHTML = '';\n        return;\n      }\n      let html = '';\n      html += \\`<button \\${\n        currentPage === 1 ? 'disabled' : ''\n      } data-page=\"\\${currentPage - 1}\" class=\"px-3 py-1 rounded bg-gray-200 dark:bg-gray-800 hover:bg-gray-300\">Prev</button>\\`;\n\n      for (let i = 1; i <= totalPages; i++) {\n        html += \\`<button \\${\n          i === currentPage\n            ? 'class=\"px-3 py-1 rounded bg-primary-600 text-white\"'\n            : \\`data-page=\"\\${i}\" class=\"px-3 py-1 dark:bg-gray-800 rounded bg-gray-200 hover:bg-gray-300\"\\`\n        }> \\${i} </button>\\`;\n      }\n\n      html += \\`<button \\${\n        currentPage === totalPages ? 'disabled' : ''\n      } data-page=\"\\${currentPage + 1}\" class=\"px-3 py-1 rounded bg-gray-200 hover:bg-gray-300 dark:bg-gray-800\">Next</button>\\`;\n      paginationEl.innerHTML = html;\n\n      paginationEl\n        .querySelectorAll('button[data-page]')\n        .forEach((btn) =>\n          btn.addEventListener('click', () => {\n            currentPage = +btn.dataset.page;\n            applyFilter();\n          })\n        );\n    }\n\n    function updateDisplay() {\n      // Ambil semua nilai checkbox yang dicentang\n      const checked = Array.from(form.elements['category'])\n        .filter((i) => i.checked)\n        .map((i) => i.value);\n\n      // Filter card berdasarkan category yang dicentang\n      let filtered = cards.filter((c) =>\n        !checked.length ||\n        c.dataset.categories.split(' ').some((cat) => checked.includes(cat))\n      );\n\n      // Sembunyikan semua kartu dulu\n      cards.forEach((c) => (c.style.display = 'none'));\n\n      // Hitung paginasi dan tampilkan kartu sesuai halaman\n      const totalPages = Math.ceil(filtered.length / pageSize);\n      const start = (currentPage - 1) * pageSize;\n\n      filtered.slice(start, start + pageSize).forEach((c, idx) => {\n        c.style.display = 'block';\n        c.dataset.animate = 'fade-in-scale';\n        c.dataset.delay = \\`\\${idx * 100}\\`;\n      });\n\n      renderPagination(totalPages);\n    }\n\n    function applyFilter() {\n      grid.classList.add('opacity-0');\n      grid.addEventListener(\n        'transitionend',\n        function handler() {\n          grid.removeEventListener('transitionend', handler);\n          updateDisplay();\n          requestAnimationFrame(() => grid.classList.remove('opacity-0'));\n          initScrollAnimations(); // panggil animasi setelah fade-in\n        },\n        { once: true }\n      );\n    }\n\n    // Event Listener tombol Apply\n    applyBtn.addEventListener('click', () => {\n      currentPage = 1;\n      applyFilter();\n      const params = Array.from(form.elements['category'])\n        .filter((i) => i.checked)\n        .map((i) => i.value)\n        .join(',');\n      history.replaceState(\n        null,\n        '',\n        window.location.pathname + (params ? \\`?category=\\${params}\\` : '')\n      );\n    });\n\n    // Event Listener tombol Reset\n    resetBtn.addEventListener('click', (e) => {\n      e.preventDefault();\n      form.querySelectorAll('input').forEach((i) => (i.checked = false));\n      applyBtn.click();\n    });\n\n    // Inisialisasi checkbox dari URL (jika ada parameter)\n    const params = new URLSearchParams(window.location.search);\n    const arr = params.get('category')?.split(',') || [];\n    document\n      .querySelectorAll('input[name=\"category\"]')\n      .forEach((i) => {\n        i.checked = arr.includes(i.value);\n      });\n\n    // === Perubahan utama di sini ===\n    // Tampilkan semua produk langsung, tanpa opacity-0, ketika pertama kali load\n    updateDisplay();\n    initScrollAnimations();\n    // ============================== \n  }\n\n  document.addEventListener('astro:page-load', () => {\n    initFilter();\n  });\n<\/script> "])), renderComponent($$result2, "Header", $$Header, {}), maybeRenderHead(), categories.map((cat) => renderTemplate`<details class="group transition-all duration-300 ease-in-out"${addAttribute(cat.slug, "key")}> <summary class="flex justify-between items-center cursor-pointer font-medium text-gray-900 dark:text-gray-100"> ${cat.name} <span class="transition-transform duration-200 group-open:rotate-180">▾</span> </summary> <div class="ml-4 overflow-hidden transition-all duration-300 ease-in-out 
                     group-open:max-h-96 max-h-0 opacity-0 group-open:opacity-100 mt-2 space-y-2"> ${cat.subcategories.map((sub) => renderTemplate`<label class="flex items-center ml-4 space-x-2 cursor-pointer group"${addAttribute(sub.slug, "key")}> <input type="checkbox"${addAttribute(sub.slug, "id")} name="category"${addAttribute(sub.slug, "value")} class="peer hidden"> <div class="w-5 h-5 flex items-center justify-center border-2 rounded-md border-gray-300
                           dark:border-gray-600 bg-white dark:bg-gray-800
                           group-hover:border-primary-400 peer-checked:border-primary-600
                           peer-checked:bg-primary-600 dark:peer-checked:bg-primary-500
                           transition-all duration-200"> <svg class="w-3 h-3 text-white opacity-0 peer-checked:opacity-100 transition-opacity duration-200" viewBox="0 0 20 20" fill="none" stroke="currentColor" stroke-width="3"> <polyline points="4 11 8 15 16 6"></polyline> </svg> </div> <span class="text-sm text-gray-700 dark:text-gray-300"> ${sub.name} </span> </label>`)} </div> </details>`), addAttribute(0, "data-delay"), renderComponent($$result2, "HeroSection", $$HeroSection, { "title": "Kategori", "highlightText": " Terbaik", "description": "Pilih kategori layanan kami." }), posts.map((post, i) => renderTemplate`<a${addAttribute(`/produk/${post.slug}`, "href")} class="card block border border-gray-200 dark:border-gray-700 
                   rounded-xl overflow-hidden shadow-sm hover:scale-105 transform transition"${addAttribute(post.kategori.join(" "), "data-categories")} data-animate="fade-in-scale"${addAttribute((i + 1) * 100, "data-delay")}${addAttribute(post.slug, "key")}> <img${addAttribute(post.gambar, "src")}${addAttribute(post.nama, "alt")} class="w-full h-48 object-cover"> <div class="p-4"> <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100">${post.nama}</h3> </div> </a>`), renderComponent($$result2, "Footer", $$Footer, {}), renderComponent($$result2, "Wapop", $$Wapop, {})) })}`;
}, "Z:/WEB/kp-dyesablon-main/src/pages/kategori.astro", void 0);

const $$file = "Z:/WEB/kp-dyesablon-main/src/pages/kategori.astro";
const $$url = "/kategori";

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: $$Kategori,
  file: $$file,
  url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

const page = () => _page;

export { page };
