---
// src/layouts/AdminLayout.astro (Contoh path)
import '../styles/global.css';
import '../styles/transitions.css';
import { ViewTransitions } from 'astro:transitions';

export interface Props {
  title: string;
  description?: string;
}

const {
  title,
  description = "Nyablonn Disini brok!!"
} = Astro.props;
---
<!DOCTYPE html>
<html lang="id">
<head>
  <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
<!-- Quill core -->
<script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <title>{title}</title>
    <meta name="description" content={description} />
    <ViewTransitions />
    <link rel="stylesheet" href="https://unpkg.com/nprogress@0.2.0/nprogress.css" />
    <script is:inline src="https://unpkg.com/nprogress@0.2.0/nprogress.js"></script>
    
    <style is:global>
        /* Style bawaanmu tetap di sini */
        button[data-loading] { /* ... */ }
        .sidebar-link { /* ... */ }

        /* DITAMBAHKAN: Kustomisasi Warna NProgress agar cocok dengan tema */
        #nprogress .bar {
            background: #4f46e5 !important; /* Warna indigo-600 */
            height: 3px !important;
        }
        #nprogress .peg {
            box-shadow: 0 0 10px #4f46e5, 0 0 5px #4f46e5 !important;
        }
        #nprogress .spinner-icon {
            border-top-color: #4f46e5 !important;
            border-left-color: #4f46e5 !important;
        }
    </style>
  <style>
    /* Loading button styles */
    button[data-loading] {
      position: relative;
    }
    button[data-loading].loading {
      cursor: not-allowed;
      opacity: 0.6;
    }
    button[data-loading].loading::after {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      width: 1rem;
      height: 1rem;
      margin-top: -0.5rem;
      margin-left: -0.5rem;
      border: 2px solid transparent;
      border-top-color: currentColor;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      z-index: 1;
    }
    @keyframes spin {
      to { transform: rotate(360deg); }
    }

    /* Sidebar link styles */
    .sidebar-link {
      display: flex;
      align-items: center;
      padding: 0.5rem 0.75rem;
      border-radius: 0.375rem;
      color: #374151; /* text-gray-700 */
      text-decoration: none;
      transition: background-color 0.2s ease-in-out;
    }
    .sidebar-link:hover {
      background-color: #f3f4f6; /* hover:bg-gray-100 */
    }
    .sidebar-link.active {
      background-color: #e5e7eb; /* bg-gray-200 */
      color: #4f46e5; /* text-indigo-700 */
      font-weight: 600;
    }
    .sidebar-icon {
      width: 1.25rem;
      height: 1.25rem;
      margin-right: 0.75rem;
      flex-shrink: 0;
    }
  </style>
</head>
<body class="antialiased text-gray-800 dark:text-gray-900">
  <div class="flex h-screen bg-gray-100 dark:bg-gray-800/50">
    <aside id="sidebar"
           class="fixed inset-y-0 left-0 w-64 bg-white border-r transform -translate-x-full transition-transform duration-200 ease-in-out z-50
                  md:relative md:translate-x-0 md:flex md:flex-col">
      <div class="p-4 flex flex-col flex-1">
        <!-- Logo / Judul Sidebar -->
        <a href="/admin" class="text-2xl font-semibold block mb-6 flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 mr-2 text-indigo-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                  d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
          </svg>
          Admin Panel
        </a>
        <!-- Navigasi -->
        <nav class="space-y-2 flex-1 overflow-auto">
          <a href="/admin" data-path="/admin" class="sidebar-link">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 sidebar-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                    d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
            </svg>
            Dashboard
          </a>
          <a href="/admin/katalog" data-path="/admin/katalog" class="sidebar-link">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 sidebar-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                    d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
            </svg>
            Katalog
          </a>
          <a href="/admin/banner" data-path="/admin/banner" class="sidebar-link">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 sidebar-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                    d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
            Banner
          </a>
          <a href="/admin/koleksi" data-path="/admin/koleksi" class="sidebar-link">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 sidebar-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                    d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z" />
            </svg>
            Koleksi
          </a>
          <a href="/admin/bahan" data-path="/admin/bahan" class="sidebar-link">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 sidebar-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                    d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
            </svg>
            Bahan
          </a>
          <!-- Tambah link lain sesuai kebutuhan -->
        </nav>
      </div>
    </aside>

    <div class="flex-1 flex flex-col">
      <header class="relative z-30 flex items-center justify-between bg-white dark:bg-gray-800 px-4 py-2 shadow-sm border-b dark:border-gray-700">
        <div class="flex items-center">
          <button id="btn-sidebar-toggle" class="mr-2 md:hidden focus:outline-none" aria-label="Toggle sidebar">
            <svg class="h-6 w-6 text-gray-700 dark:text-gray-300" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" /></svg>
          </button>
          <h1 class="text-xl font-semibold text-gray-800 dark:text-white">{title}</h1>
        </div>
        <div class="flex items-center space-x-3">
            <div class="relative">
                <button id="notification-button" class="relative text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-white p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6 6 0 00-5-5.917V5a2 2 0 10-4 0v.083A6 6 0 005 11v3.159c0 .538-.214 1.055-.595 1.436L3 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9"></path></svg>
                    <span id="notification-badge" class="absolute -top-1 -right-1 h-5 w-5 bg-red-500 text-white text-xs rounded-full flex items-center justify-center border-2 border-white dark:border-gray-800 hidden">0</span>
                </button>
                
                <div id="notification-dropdown" class="absolute right-0 mt-2 w-80 bg-white dark:bg-gray-800 rounded-md shadow-lg border dark:border-gray-700 z-50 hidden opacity-0 transition-all duration-200"
                    onclick="event.stopPropagation()">
                    <div class="p-3 font-semibold border-b dark:border-gray-700 text-sm text-gray-800 dark:text-white">Pesan Masuk Baru</div>
                    <ul id="notification-list" class="max-h-80 overflow-y-auto">
                        </ul>
                    <div id="no-new-message" class="p-8 text-center text-sm text-gray-500 hidden">Tidak ada pesan baru.</div>
                </div>
            </div>

          <div class="relative">
            <button id="profile-button" class="flex items-center space-x-2 focus:outline-none p-1 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700">
                <img src="/user.svg" alt="Avatar" class="w-8 h-8 rounded-full" />
                <span id="admin-name" class="text-sm font-medium text-gray-700 dark:text-gray-300 hidden sm:block">Admin</span>
                <svg class="h-4 w-4 text-gray-700 dark:text-gray-300 hidden sm:block" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" /></svg>
            </button>
            <div id="profile-menu" class="hidden absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 border dark:border-gray-700 rounded-md shadow-lg z-50">
                <a href="/recovery" class="block w-full text-left px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700">Ubah Password</a>
                <button id="btn-logout" class="block w-full text-left px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700">Logout</button>
            </div>
          </div>
        </div>
      </header>

      <main class="p-4 sm:p-6 overflow-auto">
        <slot />
      </main>
    </div>
  </div>

  <script type="module" is:client>
    // Logout handler
    document.getElementById("btn-logout")?.addEventListener("click", () => {
      localStorage.removeItem("staffSession");
      window.location.replace("/login");
    });
    // Ganti password
    document.getElementById("recovery")?.addEventListener("click", () => {
      window.location.replace("/recovery");
    });

    // Dropdown profil
    const profileButton = document.getElementById('profile-button');
    const profileMenu = document.getElementById('profile-menu');
    if (profileButton) {
      profileButton.addEventListener("click", (e) => {
        e.stopPropagation();
        profileMenu.classList.toggle('hidden');
      });
      document.addEventListener("click", (e) => {
        if (!profileButton.contains(e.target) && !profileMenu.contains(e.target)) {
          profileMenu.classList.add("hidden");
        }
      });
    }

    // Ambil nama dari email di localStorage staffSession
    try {
      const session = JSON.parse(localStorage.getItem("staffSession"));
      const email = session?.email ?? "";
      if (email.includes("@")) {
        const name = email.split("@")[0].toUpperCase();
        document.getElementById("admin-name").textContent = name;
      }
    } catch (e) {
      console.warn("Gagal parsing staffSession:", e);
    }

    // Highlight active link di sidebar
    document.addEventListener("DOMContentLoaded", () => {
      const currentPath = window.location.pathname;
      const links = document.querySelectorAll(".sidebar-link");
      links.forEach(link => {
        const path = link.getAttribute("data-path");
        if (path && (currentPath === path || currentPath.startsWith(path + "/"))) {
          link.classList.add("active");
        }
      });
    });
  </script>

  <!-- Script toggling sidebar di mobile -->
  <script is:client>
    document.addEventListener("DOMContentLoaded", () => {
      const sidebar = document.getElementById("sidebar");
      const overlay = document.getElementById("sidebar-overlay");
      const btnToggle = document.getElementById("btn-sidebar-toggle");

      if (sidebar && overlay && btnToggle) {
        const openSidebar = () => {
          sidebar.classList.remove("-translate-x-full");
          overlay.classList.remove("hidden");
        };
        const closeSidebar = () => {
          sidebar.classList.add("-translate-x-full");
          overlay.classList.add("hidden");
        };

        btnToggle.addEventListener("click", (e) => {
          e.stopPropagation();
          if (sidebar.classList.contains("-translate-x-full")) {
            openSidebar();
          } else {
            closeSidebar();
          }
        });

        // Klik overlay tutup sidebar
        overlay.addEventListener("click", () => {
          closeSidebar();
        });

        // Klik di luar sidebar & tombol, tutup sidebar
        document.addEventListener("click", (e) => {
          if (
            !sidebar.contains(e.target) &&
            !btnToggle.contains(e.target) &&
            !sidebar.classList.contains("-translate-x-full")
          ) {
            closeSidebar();
          }
        });

        // Pastikan ketika resize window
        const mql = window.matchMedia("(min-width: 768px)");
        mql.addEventListener("change", (e) => {
          if (e.matches) {
            // Desktop: tampilkan sidebar, sembunyikan overlay
            sidebar.classList.remove("-translate-x-full");
            overlay.classList.add("hidden");
          } else {
            // Mobile: sembunyikan sidebar default
            sidebar.classList.add("-translate-x-full");
          }
        });
        // Inisialisasi awal
        if (window.matchMedia("(min-width: 768px)").matches) {
          sidebar.classList.remove("-translate-x-full");
          overlay.classList.add("hidden");
        } else {
          sidebar.classList.add("-translate-x-full");
        }
      }
    });
  </script>

  <script is:inline>
    // Dibungkus agar tidak bentrok dengan script lain
    (function() {
        // Variabel untuk menyimpan interval agar bisa di-clear
        let notificationInterval;

        // Fungsi utama untuk setup semua logic notifikasi
        const setupNotifications = () => {
            const button = document.getElementById('notification-button');
            const dropdown = document.getElementById('notification-dropdown');
            const list = document.getElementById('notification-list');
            const badge = document.getElementById('notification-badge');
            const noMessageIndicator = document.getElementById('no-new-message');

            if (!button || !dropdown || !list || !badge || !noMessageIndicator) {
                console.warn("Satu atau lebih elemen notifikasi tidak ditemukan.");
                return;
            }

            // Fungsi untuk mengambil jumlah notifikasi baru dari API
            const fetchCount = async () => {
                try {
                    const response = await fetch('/api/new-messages-count');
                    if (!response.ok) return;
                    const { count } = await response.json();
                    
                    if (count > 0) {
                        badge.textContent = count > 9 ? '9+' : count.toString();
                        badge.classList.remove('hidden');
                    } else {
                        badge.classList.add('hidden');
                    }
                } catch (error) {
                    console.error("Gagal mengecek notifikasi:", error);
                }
            };

            // Fungsi untuk menampilkan dropdown dan isinya
            const openDropdown = async () => {
                dropdown.classList.remove('hidden');
                setTimeout(() => dropdown.classList.add('opacity-100'), 10); // Animasi fade in

                list.innerHTML = `<li class="p-4 text-center text-sm text-gray-500">Memuat...</li>`;
                noMessageIndicator.classList.add('hidden');

                try {
                    const res = await fetch('/api/get-messages?unread=true&limit=5');
                    const messages = await res.json();
                    
                    if (messages && messages.length > 0) {
                        list.innerHTML = messages.map(msg => `
                            <li class="border-b dark:border-gray-700 last:border-b-0">
                                <a href="/admin/dashboard" class="block p-3 hover:bg-gray-100 dark:hover:bg-gray-700">
                                    <p class="font-semibold text-sm text-gray-800 dark:text-white">${msg.nama}</p>
                                    <p class="text-xs text-gray-500 dark:text-gray-400 truncate">${msg.deskripsi}</p>
                                </a>
                            </li>
                        `).join('');

                        const idsToMark = messages.map(msg => msg.id);
                        await fetch('/api/mark-as-read', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ ids: idsToMark }),
                        });
                        fetchCount(); // Update badge setelah dibaca
                    } else {
                        list.innerHTML = '';
                        noMessageIndicator.classList.remove('hidden');
                    }
                } catch (err) {
                    list.innerHTML = `<li class="p-4 text-center text-sm text-red-500">Gagal memuat pesan.</li>`;
                }
            };
            
            const closeDropdown = () => {
                dropdown.classList.remove('opacity-100');
                setTimeout(() => dropdown.classList.add('hidden'), 3000); // Tunggu animasi selesai
            };

            // Pasang event listener
            button.addEventListener('click', (event) => {
                event.stopPropagation();
                if(dropdown.classList.contains('hidden')) {
                    openDropdown();
                } else {
                    closeDropdown();
                }
            });
            
            // Cek notifikasi pertama kali, lalu setiap 30 detik
            fetchCount();
            clearInterval(notificationInterval);
            notificationInterval = setInterval(fetchCount, 30000);
        };
        
        // Jalankan script saat halaman siap
        document.addEventListener('astro:page-load', setupNotifications);
        if (document.readyState !== 'loading') {
            setupNotifications();
        } else {
            document.addEventListener('DOMContentLoaded', setupNotifications);
        }

        // Event listener global untuk menutup dropdown jika klik di luar
        document.addEventListener('click', () => {
            const dropdown = document.getElementById('notification-dropdown');
            if (dropdown && !dropdown.classList.contains('hidden')) {
                dropdown.classList.remove('opacity-100');
                setTimeout(() => dropdown.classList.add('hidden'), 200);
            }
        });
    })();
  </script>

<script is:inline>
    // --- KONTROL LOADING BAR NPROGRESS ---
    document.addEventListener('astro:before-preparation', () => NProgress.start());
    document.addEventListener('astro:after-swap', () => NProgress.done());

    // --- FUNGSI UTAMA UNTUK SETUP SEMUA INTERAKSI ---
    function setupAdminLayout() {
        
        // 1. PENGECEKAN SESI (TETAP DI PALING ATAS)
        if (!localStorage.getItem("staffSession")) {
            window.location.href = "/login"; 
            return; 
        }

        // 2. LOGIC SIDEBAR TOGGLE UNTUK MOBILE
        const sidebar = document.getElementById("sidebar");
        const btnToggle = document.getElementById("btn-sidebar-toggle");
        if (sidebar && btnToggle && !btnToggle.dataset.listenerAttached) {
            btnToggle.addEventListener("click", (e) => {
                e.stopPropagation();
                sidebar.classList.toggle("-translate-x-full");
            });
            btnToggle.dataset.listenerAttached = 'true';
        }

        // 3. LOGIC DROPDOWN PROFIL & LOGOUT
        const profileButton = document.getElementById('profile-button');
        const profileMenu = document.getElementById('profile-menu');
        const logoutButton = document.getElementById('btn-logout');

        if (profileButton && profileMenu && !profileButton.dataset.listenerAttached) {
            profileButton.addEventListener("click", (e) => {
                e.stopPropagation();
                profileMenu.classList.toggle('hidden');
            });
            profileButton.dataset.listenerAttached = 'true';
        }
        if(logoutButton && !logoutButton.dataset.listenerAttached) {
            logoutButton.addEventListener('click', () => {
                localStorage.removeItem("staffSession");
                window.location.href = "/login";
            });
            logoutButton.dataset.listenerAttached = 'true';
        }
        
        // 4. LOGIC HIGHLIGHT SIDEBAR LINK
        const currentPath = window.location.pathname;
        const links = document.querySelectorAll(".sidebar-link");
        links.forEach(link => {
            link.classList.remove("active"); 
            const path = link.getAttribute("data-path");
            if (path && (currentPath === path || (path !== '/admin' && currentPath.startsWith(path)))) {
                link.classList.add("active");
            }
        });
        
        // 5. SETUP NOTIFIKASI
        // (Taruh fungsi setupNotifications() dari jawaban sebelumnya di sini jika kamu memakainya)

        // 6. AMBIL NAMA ADMIN DARI LOCALSTORAGE (DIPERBAIKI DENGAN ERROR HANDLING)
        try {
            const sessionData = localStorage.getItem("staffSession");
            // Cek jika sessionData ada sebelum di-parse
            if (sessionData) {
                const session = JSON.parse(sessionData);
                // Cek struktur data sesi sebelum mengambil email
                const email = session?.user?.email ?? "";
                const adminNameEl = document.getElementById("admin-name");
                if (email && adminNameEl) {
                    adminNameEl.textContent = email.split("@")[0] || "Admin";
                }
            }
        } catch (e) {
            // Jika JSON.parse gagal, akan muncul error di console
            console.error("Gagal parse staffSession dari localStorage. Data mungkin tidak valid:", e);
        }
        
    } // Akhir dari fungsi setupAdminLayout

    // --- EKSEKUSI SCRIPT ---
    // Jalankan semua setup setiap kali halaman Astro selesai navigasi
    document.addEventListener('astro:page-load', setupAdminLayout);
    // Panggil juga saat halaman pertama kali dimuat (setelah DOM siap)
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', setupAdminLayout);
    } else {
      setupAdminLayout();
    }

    // Listener global untuk menutup dropdown jika klik di luar
    document.addEventListener("click", () => {
        document.getElementById('profile-menu')?.classList.add("hidden");
        document.getElementById('notification-dropdown')?.classList.add('hidden');
    });
</script>
</body>
</html>